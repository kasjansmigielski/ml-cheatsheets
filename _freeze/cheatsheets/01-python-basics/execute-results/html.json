{
  "hash": "c9067886c0b6cf3de5a922bd61dd4076",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Python Basics ‚Äî 6 protip√≥w\"\nformat:\n  html:\n    code-tools: true\n---\n\n## 1) `enumerate` ‚Äî numeruj elementy w pƒôtli\n\n::: {#51899b07 .cell .thebe execution_count=1}\n``` {.python .cell-code}\nfruits = [\"apple\", \"banana\", \"cherry\"]\nfor i, f in enumerate(fruits, start=1):\n    print(i, f)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1 apple\n2 banana\n3 cherry\n```\n:::\n:::\n\n\n**Dlaczego warto:** zamiast rƒôcznie liczyƒá indeksy.\n\n---\n\n## 2) `zip` ‚Äî paruj listy w locie\n\n::: {#6ec40928 .cell .thebe execution_count=2}\n``` {.python .cell-code}\nnames = [\"Ala\", \"Bartek\", \"Cezary\"]\nscores = [84, 92, 78]\nfor name, score in zip(names, scores):\n    print(f\"{name}: {score}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAla: 84\nBartek: 92\nCezary: 78\n```\n:::\n:::\n\n\n**Protip:** `list(zip(names, scores))` da listƒô krotek.\n\n---\n\n## 3) List Comprehension ‚Äî szybko tw√≥rz listy\n\n::: {#00f67b13 .cell .thebe execution_count=3}\n``` {.python .cell-code}\nnums = [1, 2, 3, 4, 5]\nsquares_even = [x*x for x in nums if x % 2 == 0]\nsquares_even\n```\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n[4, 16]\n```\n:::\n:::\n\n\n---\n\n### Mini-zadanie ‚úÖ\nWygeneruj listƒô **d≈Çugo≈õci** ka≈ºdego napisu w `fruits`, ale **tylko** dla owoc√≥w o nazwie d≈Çu≈ºszej ni≈º 5 znak√≥w.\n\n::: {#29a72ac6 .cell .thebe execution_count=4}\n``` {.python .cell-code}\n# TODO: uzupe≈Çnij list comprehension\nfruits = [\"apple\", \"banana\", \"cherry\", \"kiwi\"]\n# lengths = [...]\n# lengths\n```\n:::\n\n\n---\n\n## 4) Dictionary Comprehension ‚Äî buduj s≈Çowniki efektywnie\n\n::: {#1a6cc962 .cell .thebe execution_count=5}\n``` {.python .cell-code}\nproducts = [\"laptop\", \"mouse\", \"keyboard\", \"monitor\"]\nprices = [2999, 59, 199, 899]\nproduct_dict = {product: price for product, price in zip(products, prices) if price < 1000}\nproduct_dict\n```\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n{'mouse': 59, 'keyboard': 199, 'monitor': 899}\n```\n:::\n:::\n\n\n**Protip:** Mo≈ºesz te≈º tworzyƒá s≈Çowniki z warunkami: `{k: v for k, v in items if condition}`.\n\n---\n\n## 5) f-strings ‚Äî formatuj stringi czytelnie\n\n::: {#0c267ca3 .cell .thebe execution_count=6}\n``` {.python .cell-code}\nname = \"Anna\"\nage = 25\nscore = 95.567\n# Stary spos√≥b\nprint(\"Nazywam siƒô \" + name + \", mam \" + str(age) + \" lat\")\n# f-string way üöÄ\nprint(f\"Nazywam siƒô {name}, mam {age} lat i m√≥j wynik to {score:.2f}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nNazywam siƒô Anna, mam 25 lat\nNazywam siƒô Anna, mam 25 lat i m√≥j wynik to 95.57\n```\n:::\n:::\n\n\n**Dlaczego warto:** Czytelniejsze i szybsze ni≈º `.format()` czy konkatenacja.\n\n---\n\n## 6) `collections.Counter` ‚Äî licz elementy automatycznie\n\n::: {#d25cee3a .cell .thebe execution_count=7}\n``` {.python .cell-code}\nfrom collections import Counter\ngrades = [\"A\", \"B\", \"A\", \"C\", \"B\", \"A\", \"B\", \"C\", \"A\"]\ngrade_counts = Counter(grades)\nprint(grade_counts)\nprint(f\"Najczƒôstsza ocena: {grade_counts.most_common(1)[0][0]}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nCounter({'A': 4, 'B': 3, 'C': 2})\nNajczƒôstsza ocena: A\n```\n:::\n:::\n\n\n**Data Science tip:** Idealne do analizy czƒôsto≈õci kategorii w danych!\n\n",
    "supporting": [
      "01-python-basics_files/figure-html"
    ],
    "filters": [],
    "includes": {}
  }
}